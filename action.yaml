name: 'Bricks CLI Action'
description: 'Manages Bricks CLI operations for Infrastructure as Code'
author: 'Bluebricks Ltd.'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  command:
    description: 'Primary Bricks command (bprint, bp, clouds, env, install, publish, updateci, etc)'
    required: true
  subcommand:
    description: 'Subcommand for the primary command (publish, bump, prepare, etc)'
    required: false
  package:
    description: 'Package name for operations that require it'
    required: false
  version:
    description: 'Version specification for version-related commands'
    required: false
  file:
    description: 'Path to a YAML manifest file for the install command (used with -f flag)'
    required: false
  env:
    description: 'Environment slug as the deployment target (used with install command)'
    required: false
  plan-only:
    description: 'Will create a deployment plan only without executing the deployment (used with install command)'
    required: false
    default: 'false'
  set-slug:
    description: 'Set deployment slug for install command'
    required: false
  config-file:
    description: 'Path to Bricks config file'
    required: false
    default: '$HOME/.bricks/config.yaml'
  api-key:
    description: 'Bricks API key for authentication'
    required: true
  api-url:
    description: 'Bricks API URL for communication'
    required: false
    default: 'https://api.bluebricks.co'
  props:
    description: 'JSON string of properties'
    required: false
  props-file:
    description: 'Path to JSON properties file for install command'
    required: false
  bump_type:
    description: 'Type of version bump to apply (major, minor, patch)'
    required: false
  src:
    description: 'Source path for blueprint operations'
    required: false
    default: '.'
  artifacts-folder:
    description: 'Path to artifacts folder'
    required: false
    default: 'bluebricks/packages'
  blueprints-folder:
    description: 'Path to blueprints folder'
    required: false
    default: 'bluebricks/blueprints'
  artifact-bump:
    description: 'Version bump type for packages'
    required: false
    default: 'patch'
  blueprint-bump:
    description: 'Version bump type for blueprints'
    required: false
    default: 'patch'
  output:
    description: 'Output format (ascii or json)'
    required: false
    default: 'ascii'
  base:
    description: 'Base branch for git diff'
    required: false
    default: 'origin/main'
  head:
    description: 'Head Git reference for updateci command comparison'
    required: false
    default: 'HEAD'
  flags:
    description: 'Additional flags to be added to any command (e.g., --dry)'
    required: false

outputs:
  has_changes:
    description: 'Boolean indicating whether any changes were detected and applied'
    value: ${{ steps.bricks-command.outputs.has_changes }}
  changes_summary:
    description: 'Formatted summary of all version changes made to artifacts and blueprints'
    value: ${{ steps.bricks-command.outputs.changes_summary }}
  dependency_graph:
    description: 'Visual representation of the dependency relationships between updated components'
    value: ${{ steps.bricks-command.outputs.dependency_graph }}
  deployment_plan:
    description: 'Detailed deployment plan for install command'
    value: ${{ steps.bricks-command.outputs.deployment_plan }}
  plan_id:
    description: 'Unique identifier for the generated deployment plan'
    value: ${{ steps.bricks-command.outputs.plan_id }}
  deployment_id:
    description: 'Identifier for the deployment'
    value: ${{ steps.bricks-command.outputs.deployment_id }}
  deployment_svg:
    description: 'Base64 encoded SVG visualization of the deployment'
    value: ${{ steps.bricks-command.outputs.deployment_svg }}
  error:
    description: 'Error message if the command failed'
    value: ${{ steps.bricks-command.outputs.error }}

runs:
  using: 'composite'
  steps:
    - name: Setup Bricks CLI
      shell: bash
      run: |
        /bin/bash -c "$(curl -fsSL https://brickscli.s3.eu-west-1.amazonaws.com/releases/latest/install.sh)"
        mkdir -p $HOME/.bricks
        echo "token: Bearer ${{ inputs.api-key }}" > $HOME/.bricks/credentials.yaml
        echo "userid: api_key" >> $HOME/.bricks/credentials.yaml
        cat "${{ inputs.config-file }}" > $HOME/.bricks/config.yaml
        bricks version

    - name: Run Bricks command
      id: bricks-command
      shell: bash
      run: |
        set -eu
        
        # Execute the entrypoint script
        ${{ github.action_path }}/entrypoint.sh
      env:
        INPUT_COMMAND: ${{ inputs.command }}
        INPUT_SUBCOMMAND: ${{ inputs.subcommand }}
        INPUT_PACKAGE: ${{ inputs.package }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_FILE: ${{ inputs.file }}
        INPUT_ENV: ${{ inputs.env }}
        INPUT_PLAN_ONLY: ${{ inputs['plan-only'] }}
        INPUT_SET_SLUG: ${{ inputs['set-slug'] }}
        INPUT_PROPS: ${{ inputs.props }}
        INPUT_PROPS_FILE: ${{ inputs['props-file'] }}
        INPUT_BUMP_TYPE: ${{ inputs.bump_type }}
        INPUT_SRC: ${{ inputs.src }}
        INPUT_ARTIFACTS_FOLDER: ${{ inputs['artifacts-folder'] }}
        INPUT_BLUEPRINTS_FOLDER: ${{ inputs['blueprints-folder'] }}
        INPUT_ARTIFACT_BUMP: ${{ inputs['artifact-bump'] }}
        INPUT_BLUEPRINT_BUMP: ${{ inputs['blueprint-bump'] }}
        INPUT_OUTPUT: ${{ inputs.output }}
        INPUT_BASE: ${{ inputs.base }}
        INPUT_HEAD: ${{ inputs.head }}
        INPUT_FLAGS: ${{ inputs.flags }}
        INPUT_API_URL: ${{ inputs.api-url }}
        INPUT_API_KEY: ${{ inputs.api-key }}
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Fetch Plan Metadata
      id: fetch-plan-metadata
      shell: bash
      run: |
        PLAN_ID=${{ steps.bricks-command.outputs.plan_id }}
        API_URL=${{ inputs.api-url }}/api/v1/deployment/$PLAN_ID
        RESPONSE=$(curl -H "Authorization: Bearer ${{ inputs.api-key }}" $API_URL)
        echo "$RESPONSE" > plan_metadata.json
        echo "::set-output name=plan_metadata::$RESPONSE"

    - name: Handle SVG Path
      id: handle-svg
      shell: bash
      run: |
        SVG_FILE=$(find /home/runner/work/bricks-factory/bricks-factory -name "*.svg" | head -n 1)
        if [ -f "$SVG_FILE" ]; then
          SVG_PATH=$(cat "$SVG_FILE")
          echo "::set-output name=svg_path::$SVG_PATH"
        else
          echo "::set-output name=svg_path::"
        fi

    # Comment on PR for update commands (not install)
    - name: Comment on PR for update commands
      if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') && steps.bricks-command.outputs.has_changes == 'true' && inputs.command != 'install'
      uses: actions/github-script@v7
      with:
        script: |
          // Helper functions for formatting
          function formatVersionChange(from, to) {
            if (from === to) {
              return `\`${from}\` *(no change)*`;
            }
            return `\`${from}\` → \`${to}\``;
          }

          function formatAffectedBy(affects) {
            if (!affects) return '';
            return ` *(affected by: ${affects.trim()})*`;
          }

          // Format the update report from the summary text
          const formatUpdateReport = (summary) => {
            if (!summary) return '';
            
            const lines = summary.split('\n');
            let formattedSummary = '';
            lines.forEach(line => {
              if (line.includes('Changed Artifacts:')) {
                formattedSummary += '### 📦 Changed Artifacts\n\n';
              } else if (line.includes('Updated Blueprints:')) {
                formattedSummary += '### 📘 Updated Blueprints\n\n';
              } else if (line.trim().startsWith('-')) {
                const cleaned = line.replace('-', '').trim();
                const parts = cleaned.split(':');
                if (parts.length >= 2) {
                  const name = parts[0].trim();
                  const versionInfo = parts.slice(1).join(':').trim();
                  const [from, rest] = versionInfo.split('→');
                  if (from && rest) {
                    let to = rest;
                    let affected = '';
                    const affectedMatch = rest.match(/\(affected by changes in:(.*)\)/);
                    if (affectedMatch) {
                      to = rest.substring(0, affectedMatch.index).trim();
                      affected = affectedMatch[1].replace(')', '').trim();
                    }
                    formattedSummary += `- **${name}**: ${formatVersionChange(from.trim(), to.trim())}${formatAffectedBy(affected)}\n`;
                  }
                }
              }
            });
            return formattedSummary;
          };

          // Retrieve data from environment
          const summaryContent = process.env.CHANGES_SUMMARY || '';
          const dependencyGraph = process.env.DEPENDENCY_GRAPH || '';
          
          const formattedContent = formatUpdateReport(summaryContent);

          // Determine if this run is a dry run based on INPUT_FLAGS
          const isDryRun = process.env.INPUT_FLAGS && process.env.INPUT_FLAGS.includes('--dry');

          // Build the comment body with the Bluebricks image at the top
          let body = `<img src="https://imagedelivery.net/GRlZt5UrJIr1V5GExj-ycg/07f0eae7-25a9-4983-b51d-d8e378f39c00/public" width="200">\n\n`;

          // Add update summary section if available
          if (formattedContent) {
            body += `### 🧱 Bricks Update Summary ${isDryRun ? '(PREVIEW)' : ''}\n\n${formattedContent}\n`;
          }

          if (isDryRun) {
            // For dry-run mode, add a preview note and dependency graph
            body += `\n> **NOTE:** This is a preview of the changes. No packages have been published yet.\n\n<details>\n<summary>📊 Dependency Graph</summary>\n\n\`\`\`md\n${dependencyGraph}\n\`\`\`\n</details>\n`;
          }

          // Append the final signature
          body += `\n\n<sub>Updated with 💙 by Bluebricks</sub>`;

          // Post the comment on the PR
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
      env:
        CHANGES_SUMMARY: ${{ steps.bricks-command.outputs.changes_summary }}
        DEPENDENCY_GRAPH: ${{ steps.bricks-command.outputs.dependency_graph }}
        INPUT_FLAGS: ${{ inputs.flags }}

    # Comment on PR for install command
    - name: Comment on PR for install command
      if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') && inputs.command == 'install' && (steps.bricks-command.outputs.deployment_plan != '' || steps.bricks-command.outputs.deployment_id != '' || steps.bricks-command.outputs.error != '')
      uses: actions/github-script@v7
      with:
        script: |
          // Format the deployment plan
          const formatDeploymentPlan = (plan) => {
            if (!plan) return '';
            
            try {
              const planData = JSON.parse(plan);
              
              let formattedPlan = '### 🚀 Deployment Plan\n\n';
              
              if (planData.environment) {
                formattedPlan += `**Target Environment:** ${planData.environment}\n\n`;
              }
              
              if (planData.summary) {
                formattedPlan += '#### Summary\n\n';
                formattedPlan += '| Resource Type | Create | Update | Delete |\n';
                formattedPlan += '|--------------|--------|--------|--------|\n';
                
                Object.entries(planData.summary).forEach(([resource, counts]) => {
                  formattedPlan += `| ${resource} | ${counts.create || 0} | ${counts.update || 0} | ${counts.delete || 0} |\n`;
                });
                
                formattedPlan += '\n';
              }
              
              if (planData.changes && planData.changes.length > 0) {
                formattedPlan += '#### Detailed Changes\n\n';
                formattedPlan += '<details>\n<summary>Click to expand</summary>\n\n';
                
                planData.changes.forEach(change => {
                  formattedPlan += `##### ${change.resource_type}: ${change.resource_name}\n\n`;
                  formattedPlan += `**Action:** ${change.action}\n\n`;
                  
                  if (change.details) {
                    formattedPlan += '```json\n';
                    formattedPlan += JSON.stringify(change.details, null, 2);
                    formattedPlan += '\n```\n\n';
                  }
                });
                
                formattedPlan += '</details>\n\n';
              }
              
              if (planData.warnings && planData.warnings.length > 0) {
                formattedPlan += '#### ⚠️ Warnings\n\n';
                planData.warnings.forEach(warning => {
                  formattedPlan += `- ${warning}\n`;
                });
                formattedPlan += '\n';
              }
              
              if (planData.plan_id) {
                formattedPlan += `**Plan ID:** \`${planData.plan_id}\`\n\n`;
                formattedPlan += `[View detailed plan in Bricks Dashboard](https://app.bluebricks.dev/plans/${planData.plan_id})\n\n`;
              }
              
              return formattedPlan;
            } catch (e) {
              return `### 🚀 Deployment Plan\n\n${plan}\n\n`;
            }
          };

          // Retrieve data from environment
          const deploymentPlan = process.env.DEPLOYMENT_PLAN || '';
          const deploymentSvg = process.env.DEPLOYMENT_SVG || '';
          const deploymentId = process.env.DEPLOYMENT_ID || '';
          const planId = process.env.PLAN_ID || '';
          const errorMessage = process.env.ERROR_MESSAGE || '';
          
          const formattedPlan = formatDeploymentPlan(deploymentPlan);

          // Build the comment body with the Bluebricks image at the top
          let body = `<img src="https://imagedelivery.net/GRlZt5UrJIr1V5GExj-ycg/07f0eae7-25a9-4983-b51d-d8e378f39c00/public" width="200">\n\n`;

          // Add a header for the install command with plan URL if available
          if (planId) {
            body += `### 🧱 Bricks Deployment [View Plan](https://app.bluebricks.dev/plans/${planId})\n\n`;
          } else {
            body += `### 🧱 Bricks Deployment\n\n`;
          }
          
          // Add deployment plan section if available
          if (formattedPlan) {
            body += formattedPlan;
          }
          
          // Add SVG visualization if available
          if (deploymentSvg) {
            body += `### 📊 Deployment Visualization\n\n<details>\n<summary>Click to expand deployment diagram</summary>\n\n<div align="center">\n\n![Deployment Visualization](data:image/svg+xml;base64,${deploymentSvg})\n\n</div>\n</details>\n\n`;
          }
          
          // Add deployment and plan links if available
          if (deploymentId || planId) {
            body += `### 🔗 Bricks Dashboard Links\n\n`;
            
            if (planId) {
              body += `- [View Deployment Plan](https://app.bluebricks.dev/plans/${planId})\n`;
            }
            
            if (deploymentId) {
              body += `- [View Deployment Details](https://app.bluebricks.dev/deployments/${deploymentId})\n`;
            }
            
            body += `\n`;
          }

          // Add error message if available
          if (errorMessage) {
            body += `### ❌ Error\n\n\`\`\`\n${errorMessage}\n\`\`\`\n\n`;
          }

          // Append the final signature
          body += `\n\n<sub>Updated with 💙 by Bluebricks</sub>`;

          // Post the comment on the PR
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
      env:
        DEPLOYMENT_PLAN: ${{ steps.bricks-command.outputs.deployment_plan }}
        DEPLOYMENT_ID: ${{ steps.bricks-command.outputs.deployment_id }}
        DEPLOYMENT_SVG: ${{ steps.bricks-command.outputs.deployment_svg }}
        PLAN_ID: ${{ steps.bricks-command.outputs.plan_id }}
        ERROR_MESSAGE: ${{ steps.bricks-command.outputs.error }}
